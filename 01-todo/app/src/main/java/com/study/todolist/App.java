/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.study.todolist;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;

import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.util.List;

public class App {
    static private List<TaskDto> taskDataList = List.of(
            TaskDto.builder()
                    .id(Integer.toUnsignedLong(1))
                    .title("밥 먹기")
                    .date("2021/09/04")
                    .build(),
            TaskDto.builder()
                    .id(Integer.toUnsignedLong(2))
                    .title("밥 먹기")
                    .date("2021/09/04")
                    .build()
    );

    public static void startServer() throws IOException {
        HttpServer server = HttpServer.create(new InetSocketAddress(8080), 0);

        server.createContext("/", new RootHandler());
        server.createContext("/tasks", new TaskListHandler());

        server.setExecutor(null);
        server.start();
    }

    public static void main(String[] args) throws IOException {
        startServer();
    }

    static class RootHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            exchange.sendResponseHeaders(200, 0);

            OutputStream outputStream = exchange.getResponseBody();
            outputStream.write("Hello, world!".getBytes());
            outputStream.close();
        }
    }

    static class TaskListHandler implements HttpHandler {
        private Object getDataOn(String path) {
            if (path.matches("^/tasks/[0-9]+$")) {
                String[] parts = path.split("/");
                String id = parts[parts.length - 1];

                // TODO: 데이터에서 해당하는 id 를 '찾아서' 돌려주도록 구현 변경
                return taskDataList.get(Integer.parseInt(id) - 1);
            }

            return taskDataList;
        }

        @Override
        public void handle(HttpExchange exchange) throws IOException {
            String path = exchange.getRequestURI().getPath();

            Object data = getDataOn(path);

            send(exchange, data);
        }

        private void send(HttpExchange exchange, Object data) throws IOException {
            exchange.sendResponseHeaders(200, 0);

            ObjectMapper objectMapper = new ObjectMapper();

            OutputStream outputStream = exchange.getResponseBody();

            objectMapper.writeValue(outputStream, data);
            outputStream.close();
        }
    }
}
